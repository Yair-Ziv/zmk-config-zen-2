/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    chosen {
        zmk,matrix_transform = &default_transform;

        // zmk,matrix_transform = &five_column_transform;
    };
};

/ {
    behaviors {
        td_caps: td_caps {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_CAPS";
            #binding-cells = <0>;
            bindings = <&kp LSHIFT>, <&caps_word>, <&kp CAPS>;
        };

        td_c_p: td_c_p {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_C_P";
            #binding-cells = <0>;
            bindings = <&mt LCTRL ESC>, <&kp LG(C)>, <&kp LG(V)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        gh_dash {
            bindings = <&kp MINUS>;
            key-positions = <17 18>;
            layers = <0>;
        };

        bn_underscore {
            bindings = <&kp UNDER>;
            key-positions = <28 31>;
        };

        ty_caps_word {
            bindings = <&caps_word>;
            key-positions = <4 7>;
        };

        sd_d_equals {
            bindings = <&d_equals>;
            key-positions = <13 14>;
        };

        se_g_equals {
            bindings = <&g_equals>;
            key-positions = <13 2>;
        };

        sc_l_equals {
            bindings = <&l_equals>;
            key-positions = <13 26>;
        };

        tltr_sleep {
            bindings = <&kp C_SLEEP>;
            key-positions = <0 11>;
        };
    };

    macros {
        d_equals: d_equals {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp EQUAL>;
            label = "D_EQUALS";
        };

        g_equals: g_equals {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GT &kp EQUAL>;
            label = "G_EQUALS";
        };

        l_equals: l_equals {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LT &kp EQUAL>;
            label = "L_EQUALS";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";

            // --------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   | 
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB   &kp Q           &kp W  &kp E           &kp R       &kp T          &kp Y        &kp U              &kp I        &kp O    &kp P                 &kp BSPC
&td_c_p   &mt LEFT_ALT A  &kp S  &kp D           &kp F       &kp G          &kp H        &kp J              &kp K        &kp L    &mt RIGHT_SHIFT SEMI  &kp RIGHT_GUI
&td_caps  &kp Z           &kp X  &kp C           &kp V       &kp B          &kp N        &kp M              &kp COMMA    &kp DOT  &kp FSLH              &kp ESC
                                 &lt 4 LEFT_GUI  &lt 3 BSPC  &lt 1 ENTER    &lt 2 SPACE  &mt LSHIFT DELETE  &key_repeat
            >;
        };

        symbols_layer {
            display-name = "SYM";

            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp GRAVE  &kp TILDE  &kp LT     &kp GT    &kp CARET  &kp PIPE     &kp AMPS   &kp BSLH  &kp LBRC  &kp RBRC  &none      &kp BSPC
&trans     &kp ESC    &kp MINUS  &kp PLUS  &kp EQUAL  &kp SQT      &kp DQT    &none     &kp LPAR  &kp RPAR  &kp COLON  &none
&trans     &none      &kp FSLH   &kp STAR  &kp DLLR   &none        &none      &none     &kp LBKT  &kp RBKT  &none      &none
                                 &trans    &trans     &kp ENTER    &kp SPACE  &trans    &trans
            >;
        };

        numbers_layer {
            display-name = "NUM";

            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans   &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS  &kp STAR  &kp LPAR  &kp RPAR  &kp BSPC
&trans   &kp N1    &kp N2  &kp N3    &kp N4    &kp N5       &kp N6     &kp N7    &kp N8    &kp N9    &kp N0    &none
&kp F11  &kp F1    &kp F2  &kp F3    &kp F4    &kp F5       &kp F6     &kp F7    &kp F8    &kp F9    &kp F10   &kp F12
                           &trans    &trans    &kp ENTER    &kp SPACE  &none     &trans
            >;
        };

        navigation_layer {
            display-name = "NAV";
            bindings = <
&trans  &none     &kp UP    &kp PG_UP  &none     &none      &none     &none     &none   &none      &none  &none
&trans  &kp LEFT  &kp DOWN  &kp RIGHT  &kp HOME  &kp END    &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &none  &none
&trans  &trans    &trans    &kp PG_DN  &trans    &trans     &trans    &trans    &trans  &trans     &none  &none
                            &trans     &trans    &trans     &trans    &trans    &trans
            >;
        };

        systems_layer {
            bindings = <
&none        &kp K_MUTE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP       &kp C_PREV        &kp C_NEXT    &trans  &trans  &trans  &trans  &trans  &none
&bootloader  &trans      &trans             &trans                &kp C_PLAY_PAUSE  &kp C_STOP    &trans  &trans  &trans  &trans  &trans  &bootloader
&bootloader  &trans      &trans             &kp LG(LS(NUMBER_4))  &kp PRINTSCREEN   &trans        &trans  &trans  &trans  &trans  &trans  &trans
                                            &trans                &trans            &trans        &trans  &trans  &trans
            >;
        };
    };
};
